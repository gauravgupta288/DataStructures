package Month10_May.Day174_060523;

public class SumOfXorOfAllPairs {
    public static void main(String[] args) {
        System.out.println(sumofXOR(new int[]{7652,85495,63108,8466,98239,52482,45709,44168,36189,55055,19443,91001,76979,4730,71455,20388,19389,1956,1661,12427,98459,90416,61472,61205,67406,77255,15805,24266,36287,21653,51211,80122,8249,33482,76681,74422,40298,92249,1016,58901,7462,50428,13181,72529,33028,64942,3937,43527,70559,34319,47921,75995,65782,82532,97053,65713,87244,93845,87165,53973,38280,71086,92263,99604,47639,15454,27003,22465,3301,18842,24568,30385,53896,77659,40451,36543,47669,93340,50471,94825,53480,72445,64336,69713,35585,60131,94831,55228,20514,72661,81273,57015,83090,74432,40008,7981,2364,40917,66872,39762,63281,59910,7563,2811,44130,75596,49542,81988,43015,42148,54194,23657,79642,92749,81116,13741,75356,28875,57365,10390,26704,72648,31410,47278,94299,56910,74733,72772,42251,90317,94530,22313,21996,81147,92851,71124,78772,44912,15077,79326,33208,24806,62817,78215,18421,50399,67059,75887,15656,96830,85774,95069,22806,95980,91143,10460,23077,66549,93782,90105,36321,4585,26744,44870,64632,76475,45679,46395,83966,63973,56832,85711,41642,25634,79060,47235,72311,80467,53688,40536,64516,78299,41149,2547,96149,72547,41688,60960,86703,5175,69123,97740,98112,68134,38906,39690,57844,1094,87007,46543,99041,43501,3799,78999,98396,84985,28587,92445,98562,12810,35880,93350,28625,44259,41887,44311,38027,36620,25669,49691,11674,74514,52436,8894,98534,5254,4553,58804,66721,50778,44324,21363,36348,10055,13643,8532,68879,97642,68199,38614,90709,56130,79621,40411,17389,12340,5174,86698,30778,62631,73711,53995,36772,49417,4778,70478,97237,48296,10244,25828,2237,76729,65021,70756,60495,32788,10203,90312,35106,12629,60071,34989,82160,64541,1037,99607,30394,18288,78049,74922,82434,76757,77749,12562,15983,81721,19172,73052,9837,48332,80427,80187,10954,17282,56330,56036,63226,66195,84903,44466,28053,54779,37163,67010,76436,63323,66659,75640,8439,20054,60832,33945,64929,341,51191,687,66874,50308,34114,23336,41100,93138,83326,74935,63367,36309,25259,72146,38942,90980,79727,91826,17128,30843,78867,16502,83135,97594,516,90272,94436,28518,59475,37174,40729,50599,69462,77954,74533,29352,84613,50451,47124,69787,73309,88602,10037,43506,64001,59438,38714,87687,92884,42152,91771,79349,32448,38152,14451,41756,32146,28494,70178,69889,19067,49569,93545,3979,76720,71532,87473,56424,49419,65500,29124,19910,99689,82979,20530,83546,8298,86360,47214,43996,45780,91189,78831,79081,16592,63832,21616,67712,44044,45986,45295,87430,40023,25595,86481,33282,35783,34732,11869,7425,49430,90595,96477,65555,15361,91091,59488,42252,59976,24689,34363,50980,96177,70424,63555,82935,7782,10918,35924,43430,91218,5757,49901,10165,83687,33475,12850,53515,97499,96738,56873,46101,4294,24745,71933,92514,89861,33289,57791,84456,37115,38904,82463,77214,35499,93553,83255,71872,86463,95987,52161,41359,58020,30686,35356,98574,65355,43609,41547,4486,30730,87982,12309,96226,86841,23852,76102,82324,10518,78276,95725,16047,28801,36749,91036,77962,18144,68193,78636,24227,29180,12797,50230,72602,80771,91845,11994,57426,98180,99261,43996,99571,98262,60881,77282,97259,16657,6958,49047,12136,92595,8455,22060,86911,34044,63825,21842,32169,83858,82279,85088,1504,17246,85382,27283,13383,99630,15026,27113,81951,85713,39632,15013,93107,63230,21354,58351,31437,9293,83758,96081,55998,34972,74799,8762,27770,27787,90146,64863,40377,82784,45571,36117,54648,2852,1518,71993,83190,51429,57638,73864,47351,9554,98993,30087,95429,19010,36953,97116,88042,589,34125,67122,50038,43057,2398,48250,24671,26382,70626,96261,76380,31563,67477,83626,55690,71727,95987,72166,30503,86088,7743,18327,56538,21256,24416,47649,69801,23138,46398,65097,31232,76498,169,83900,49777,56018,71091,81545,32655,3014,26033,17635,91282,61553,40381,98432,6550,3101,92247,27164,70747,5304,6431,35671,90246,89233,47549,56979,23199,44703,24122,74359,86514,86522,59620,77774,50638,96800,59310,70473,25032,72402,52557,30681,26297,54996,96988,36022,9532,62704,1849,1691,98417,27828,63398,53223,45245,72783,13225,38237,93704,45624,85164,87845,30973,27527,3613,29705,50061,80762,66799,90745,11468,33874,23832,85447,19187,15059,9809,66060,63196,18599,87225,705,20938,42812,47634,47623,9662,62689,72514,30847,27171,36237,25044,22515,58851,9816,91637,13675,70927,56320,4631,61369,81499,92486,88113,80046,49279,59374,39516,7810,36727,23459,28088,41648,42724,52464,72133,83959,60842,21672,46955,98586,55088,47039,51058,62593,18594,12494,71946,44694,97906,45651,87429,937,60915,94063,90072,99917,63837,98118,64222,99832,39788,3138,45364,87271,72897,38961,70846,82807,18847,5602,72193,6157,94031,8780,83463,35600,64317,12584,29822,9609,86776,68946,17241,66954,15094,93259,34029,59396,32077,44090,63446,46831,4379,93094,78479,88870,49280,5278,18077,68360,76159,95761,4997,43929,17761,22006,86290,88638,27921,27078,59280,50021,56800,27197,73555,15835,31939,10300,27569,63987,50096,43050,3268,98886,76133}));
    }

    static int sumofXOR(int A[]){
        long ans = 0;
        int mod = 1000000007;
        System.out.println(Integer.MAX_VALUE);
        //208610688,48106344,135402124,34168992,95013776,35218040,117231114,172905590,66652014,45970782,222323244,203402914,35292972,159829956,154584716,107190226,71335264,42786172,203327982,3484338,28062034,64179258,210993,94938844,155858560,123562868,223447224,116744056,55711942,88082566,45671054,16072914,165299992,136601036,44659472,219063702,202953322,188341582,116931386,127759060,131318330,49867246,92278758,40875406,218314382,135889182,6893744,97111872,56236466,96662280,52340002,195010530,44884268,167435554,155746162,201679478,54138370,103481092,25814074,186093622,208498290,31883566,122101694,128058788,133566290,55749408,178675354,186056156,155071774,35180574,82050540,7755462,29448276,100333948,130156884,67850926,44509608,17084496,216703344,197295956,174479162,18058612,51290954,173917172,51815478,218426780,184032992,148140564,108951128
        for(int i = 30; i >= 0; i--){
            long count = 0;
            for(int j = 0; j < A.length; j++){
                count = (count + ((A[j] >> i) & 1)) % mod;
            }
            long y = A.length - count;
            ans = (ans + (y * count * (int)Math.pow(2, i))) % mod;
        }
        return (int)ans % mod;
    }
}
